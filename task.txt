Разработка RESTful API для управления пользователями и их записями
Цель: Создать RESTful API для регистрации, авторизации и управления записями пользователей, используя современные технологии и инструменты, обеспечивающие высокую масштабируемость и поддерживаемость проекта.
Технологии и инструменты, которые необходимо использовать:
- Python
- FastAPI – для создания API
- SQLAlchemy – для работы с ORM и взаимодействия с базой данных
- Redis – для хранения данных в NoSQL формате
- PostgreSQL – для хранения данных пользователей и их записей
- JWT-токены – для проверки авторизации пользователей
- SlowAPI – для ограничения количества запросов
- Docker – обязательный инструмент для контейнеризации приложения и обеспечения его масштабируемости
Требования к структуре проекта:
- Проект должен иметь чётко организованную структуру с разделением на модули (например, роуты, модели, схемы, сервисы).
- Следовать принципам SOLID и паттернам проектирования для обеспечения масштабируемости и лёгкости сопровождения.
- Конфигурация приложения должна быть гибкой и управляться через переменные окружения.
- Использовать миграции базы данных (например, с помощью Alembic) для управления изменениями схемы базы данных.
- Обеспечить логирование и обработку ошибок на уровне приложения.
Функциональность, которую необходимо реализовать:
1. Регистрация нового пользователя
Метод: POST
Эндпоинт: /register
Описание: Создание нового пользователя с необходимыми данными.
2. Авторизация пользователя
Метод: POST
Эндпоинт: /login
Описание: Аутентификация пользователя и выдача JWT-токена.
3. Разлогинивание пользователя
Метод: POST
Эндпоинт: /logout
Описание: Инвалидизация JWT-токена пользователя.
4. Создание новой записи
Метод: POST
Эндпоинт: /tasks
Описание: Создание новой записи пользователя.
5. Получение списка всех записей
Метод: GET
Эндпоинт: /tasks
Описание: Получение списка всех записей текущего пользователя.
6. Получение конкретной записи
Метод: GET
Эндпоинт: /tasks/{task_id}
Описание: Получение детали конкретной записи по её идентификатору.
7. Изменение записи
Метод: PUT
Эндпоинт: /tasks/{task_id}
Описание: Обновление данных конкретной записи.
8. Удаление записи
Метод: DELETE
Эндпоинт: /tasks/{task_id}
Описание: Удаление конкретной записи.

Дополнительные требования:
- Для всех эндпоинтов, кроме регистрации и авторизации, необходимо проверять JWT-токен пользователя.
- Использовать SlowAPI для ограничения количества запросов до 100 запросов в минуту.
- PostgreSQL: Использовать для хранения данных пользователей и их записей, взаимодействуя через SQLAlchemy ORM.
- Redis: Использовать для хранения данных в NoSQL формате, например, для кеширования или хранения сессий.
- Приложение обязательно должно быть контейнеризовано с помощью Docker. Предусмотреть Dockerfile и docker-compose.yml для запуска всех необходимых сервисов (приложение, PostgreSQL, Redis).
- README-файл репозитория должен содержать подробную инструкцию по запуску приложения, настройке окружения и выполнению запросов к API.
- Рекомендуется добавить тесты для основных функций API (необязательно, но приветствуется).
Все ответы API должны быть в формате JSON.
Выполненное задание должно быть размещено на GitHub в виде открытого репозитория.
